/**
 * Games and Fun Command Handlers for Cool Shot AI WhatsApp Bot
 */

const logger = require('../utils/logger');

class GamesHandler {
  constructor(userManager) {
    this.userManager = userManager;
  }

  // Handle /games command
  async handleGames(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('games', userId);

    const gamesMessage = `🎮 *Cool Shot Games & Fun*

🎲 **Available Games:**
• /dice - Roll a dice (1-6)
• /coin - Flip a coin
• /number - Random number (1-100)
• /8ball <question> - Magic 8-ball
• /quote - Get an inspirational quote
• /joke - Random joke
• /fact - Random fun fact

🎯 *Example:* /8ball Will I be successful?`;

    await sock.sendMessage(userId, { text: gamesMessage });
    logger.command('Games menu shown', { userId });
  }

  // Handle /dice command
  async handleDice(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('dice', userId);

    const roll = Math.floor(Math.random() * 6) + 1;
    const diceEmoji = ['⚀', '⚁', '⚂', '⚃', '⚄', '⚅'][roll - 1];

    const diceMessage = `🎲 *Dice Roll*

${diceEmoji} **You rolled:** ${roll}

🎯 _Good luck!_`;

    await sock.sendMessage(userId, { text: diceMessage });
    logger.command('Dice rolled', { userId, result: roll });
  }

  // Handle /coin command
  async handleCoin(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('coin', userId);

    const result = Math.random() < 0.5 ? 'Heads' : 'Tails';
    const emoji = result === 'Heads' ? '🙂' : '🔄';

    const coinMessage = `🪙 *Coin Flip*

${emoji} **Result:** ${result}

🎯 _Fate has decided!_`;

    await sock.sendMessage(userId, { text: coinMessage });
    logger.command('Coin flipped', { userId, result });
  }

  // Handle /number command
  async handleNumber(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('number', userId);

    const number = Math.floor(Math.random() * 100) + 1;

    const numberMessage = `🔢 *Random Number*

🎯 **Your number:** ${number}
📊 **Range:** 1 - 100

✨ _Generated by Cool Shot Systems_`;

    await sock.sendMessage(userId, { text: numberMessage });
    logger.command('Random number generated', { userId, number });
  }

  // Handle /8ball command
  async handle8Ball(sock, messageInfo, args) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('8ball', userId);

    if (!args || args.length === 0) {
      await sock.sendMessage(userId, { 
        text: `Usage: /8ball <question>
Example: /8ball Will I be successful?` 
      });
      return;
    }

    const question = args.join(' ');
    const responses = [
      'It is certain', 'Reply hazy, try again', 'Don\'t count on it', 
      'It is decidedly so', 'Ask again later', 'My reply is no',
      'Without a doubt', 'Better not tell you now', 'My sources say no',
      'Yes definitely', 'Cannot predict now', 'Outlook not so good',
      'You may rely on it', 'Concentrate and ask again', 'Very doubtful',
      'As I see it, yes', 'Most likely', 'Outlook good',
      'Signs point to yes', 'Yes'
    ];

    const answer = responses[Math.floor(Math.random() * responses.length)];

    const ballMessage = `🎱 *Magic 8-Ball*

❓ **Question:** "${question}"
🔮 **Answer:** *${answer}*

✨ _The magic 8-ball has spoken!_`;

    await sock.sendMessage(userId, { text: ballMessage });
    logger.command('8-ball consulted', { userId, question, answer });
  }

  // Handle /quote command
  async handleQuote(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('quote', userId);

    const quotes = [
      { text: "The only way to do great work is to love what you do.", author: "Steve Jobs" },
      { text: "Innovation distinguishes between a leader and a follower.", author: "Steve Jobs" },
      { text: "Life is what happens to you while you're busy making other plans.", author: "John Lennon" },
      { text: "The future belongs to those who believe in the beauty of their dreams.", author: "Eleanor Roosevelt" },
      { text: "It is during our darkest moments that we must focus to see the light.", author: "Aristotle" },
      { text: "Success is not final, failure is not fatal: it is the courage to continue that counts.", author: "Winston Churchill" },
      { text: "The only impossible journey is the one you never begin.", author: "Tony Robbins" },
      { text: "In the middle of difficulty lies opportunity.", author: "Albert Einstein" },
      { text: "Believe you can and you're halfway there.", author: "Theodore Roosevelt" },
      { text: "Quality is not an act, it is a habit.", author: "Aristotle" }
    ];

    const quote = quotes[Math.floor(Math.random() * quotes.length)];

    const quoteMessage = `💎 *Inspirational Quote*

"${quote.text}"

👤 *— ${quote.author}*

✨ _Inspiration by Cool Shot Systems_`;

    await sock.sendMessage(userId, { text: quoteMessage });
    logger.command('Quote shared', { userId, author: quote.author });
  }

  // Handle /joke command
  async handleJoke(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('joke', userId);

    const jokes = [
      "Why don't scientists trust atoms? Because they make up everything!",
      "Why did the programmer quit his job? Because he didn't get arrays!",
      "How do you organize a space party? You planet!",
      "Why don't eggs tell jokes? They'd crack each other up!",
      "What do you call a fake noodle? An impasta!",
      "Why did the math book look so sad? Because it had too many problems!",
      "What's the best thing about Switzerland? I don't know, but the flag is a big plus!",
      "Why do programmers prefer dark mode? Because light attracts bugs!",
      "How does a penguin build its house? Igloos it together!",
      "Why don't robots ever panic? They have nerves of steel!"
    ];

    const joke = jokes[Math.floor(Math.random() * jokes.length)];

    const jokeMessage = `😂 *Random Joke*

🎭 ${joke}

😄 _Hope that made you smile!_`;

    await sock.sendMessage(userId, { text: jokeMessage });
    logger.command('Joke shared', { userId });
  }

  // Handle /fact command
  async handleFact(sock, messageInfo) {
    const userId = messageInfo.key.remoteJid;
    await this.userManager.updateUser(messageInfo);
    await this.userManager.trackCommand('fact', userId);

    const facts = [
      "Honey never spoils! Archaeologists have found pots of honey in ancient Egyptian tombs that are over 3,000 years old and still perfectly edible.",
      "Octopuses have three hearts and blue blood!",
      "A group of flamingos is called a 'flamboyance'.",
      "Bananas are berries, but strawberries aren't!",
      "There are more possible games of chess than atoms in the observable universe.",
      "A shrimp's heart is in its head.",
      "Butterflies taste with their feet.",
      "The human brain uses about 20% of the body's total energy.",
      "Lightning strikes the Earth about 100 times per second.",
      "A single cloud can weigh more than a million pounds!"
    ];

    const fact = facts[Math.floor(Math.random() * facts.length)];

    const factMessage = `🧠 *Fun Fact*

💡 ${fact}

🤓 _Learn something new every day!_`;

    await sock.sendMessage(userId, { text: factMessage });
    logger.command('Fact shared', { userId });
  }
}

module.exports = GamesHandler;